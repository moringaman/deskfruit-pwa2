import { createSlice, 
  //PayloadAction,
   createAsyncThunk } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import  { fetchDesk } from './deskApi';


export interface User {
  id: number
  name: string
  avatarURI: string
  expression: string
  active: boolean,
}

export interface Desk{
  users: User[]
  position: 'up' | 'down'
  id: string | undefined
  name: string | undefined
  status: 'idle' | 'loading' | 'failed',
  authenticated: boolean
};

const initialState: Desk = {
  users: [],
  position: 'down',
  id: undefined,
  name: undefined,
  status: 'idle',
  authenticated: false
}

export const getDeskAsync = createAsyncThunk(
  'desk/getDesk',
  async (desk: Desk) => {
    const response = await fetchDesk();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

const deskSlice = createSlice({
  name: 'desk',
  initialState,

  reducers: {
    deskAdded:(state, action) => {
      state = action.payload
    },
    deskUserAdded:(state, action) => {
      state.users.push({
        id: action.payload.id,
        name: action.payload.name,
        avatarURI: 'https://avatars/api/ramdom.svg',
        expression: '* * * * *',
        active: false
      })
    }
    // todoToggled:(state, action:PayloadAction<number>) => {
    //   const todo = state.data.find(todo => todo.id === action.payload)
    //   if(todo)
    //   todo.completed = !todo.completed
    // },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDeskAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDeskAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state = action.payload
        // state.push({
        //   id: action.payload.id,
        //   text: action.payload.text,
        //   completed: false
        // })
      })
      .addCase(getDeskAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
})

export const desk = (state: RootState) => state.desk
export const { deskAdded, deskUserAdded } = deskSlice.actions
export default deskSlice.reducer
