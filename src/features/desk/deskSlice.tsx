import {
  createSlice,
  //PayloadAction,
  createAsyncThunk
} from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import axios from 'axios'
import _ from 'lodash'
import { API_BASE_URL } from '../../config';

export interface User {
  id: number
  name: string
  avatarURI: string
  expression: string
  active: boolean,
}

export interface Desk {
  users: User[] | undefined
  position: 'up' | 'down'
  id: string | undefined
  deskId: string | undefined
  name: string | undefined
  status: 'idle' | 'loading' | 'failed',
  password: string
  authenticated: boolean
};


const initialState = {
  desk: {
    users: [],
    position: 'down',
    deskId: undefined,
    id: undefined,
    name: undefined,
    password: '',
    authenticated: false
  },
  status: 'idle',
  device: {
    id: undefined,
    online: false,
  }
}

export const getDeskAsync = createAsyncThunk(
  'desk/fetchDesk',
  async (id: string) => {
    if (!!id) {
      console.log("calling async funk ", id)

      //const response = await fetchDesk(id);
      const response = await axios.get(`${API_BASE_URL}/desks/${id}`)
      // The value we return becomes the `fulfilled` action payload
      console.log('deskasync', response.data)
      return { ...response.data }
    }
  }
);

export const getDeviceAsync = createAsyncThunk(
  'desk/fetchDevice',
  async (id: string) => {
    if (!!id) {
      console.log("calling async funk ", id)
      try {
        const response = await axios.get(`${API_BASE_URL}/desks/devices/${id}`)
        if (_.isEmpty(response)) {
          throw new Error('device not found')
        }
        console.log('device asybc', response.data)
        return { ...response.data }
      } catch (err) {
        throw new Error('device not found')
      }
    }
  }
);
const deskSlice = createSlice({
  name: 'desk',
  initialState,

  reducers: {
    deskAdded: (state, action) => {
      state.desk = action.payload
    },
    deskUserAdded: (state, action) => {
      //@ts-ignore
      state.desk.users.push = ({
        id: action.payload.id,
        name: action.payload.name,
        avatarURI: 'https://avatars/api/ramdom.svg',
        expression: '* * * * *',
        active: false
      } as User)
    },
    deskCleared: (state) => {
      state.desk = initialState.desk
    }
    // todoToggled:(state, action:PayloadAction<number>) => {
    //   const todo = state.data.find(todo => todo.id === action.payload)
    //   if(todo)
    //   todo.completed = !todo.completed
    // },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDeskAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDeskAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.desk = { ...action.payload }
      })
      .addCase(getDeskAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getDeviceAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDeviceAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.device = { ...action.payload }
      })
      .addCase(getDeviceAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
})

export const desk = (state: RootState) => state.desk
export const status = (state: RootState) => state.desk.status
export const device = (state: RootState) => state.desk.device
export const { deskAdded, deskUserAdded, deskCleared } = deskSlice.actions
export default deskSlice.reducer
