import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import  { fetchTodos } from './todosApi';


export interface Todo {
  id: number
  text: string
  completed: boolean
}

export interface TodoState {
  data: Todo[],
  status: 'idle' | 'loading' | 'failed'
};

const initialState: TodoState = {
  data: [],
  status: 'idle'
}

export const getTodosAsync = createAsyncThunk(
  'todos/getTodos',
  async (todos: Todo[]) => {
    const response = await fetchTodos();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

const todosSlice = createSlice({
  name: 'todos',
  initialState,

  reducers: {
    todoAdded:(state, action) => {
      state.data.push({
        id: action.payload.id,
        text: action.payload.text,
        completed: false
      })
    },
    todoToggled:(state, action:PayloadAction<number>) => {
      const todo = state.data.find(todo => todo.id === action.payload)
      if(todo)
      todo.completed = !todo.completed
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTodosAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getTodosAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data.concat(action.payload)
        // state.push({
        //   id: action.payload.id,
        //   text: action.payload.text,
        //   completed: false
        // })
      })
      .addCase(getTodosAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
})

export const todos = (state: RootState) => state.todos
export const { todoAdded, todoToggled } = todosSlice.actions
export default todosSlice.reducer
